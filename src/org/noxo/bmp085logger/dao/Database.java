package org.noxo.bmp085logger.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.noxo.bmp085logger.model.Pressure;
import org.noxo.bmp085logger.model.Temperature;
import org.noxo.bmp085logger.util.Log;

public class Database {

	private static final String SQL_CREATE_TEMPERATURE_TABLE = 
			"CREATE TABLE IF NOT EXISTS temperature (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, value DOUBLE, utc BIGINT)";

	private static final String SQL_CREATE_PRESSURE_TABLE = 
			"CREATE TABLE IF NOT EXISTS pressure (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, value DOUBLE, utc BIGINT)";

	private static final String SQL_INSERT_TEMPERATURE = "INSERT INTO temperature"
			+ "(VALUE, UTC) VALUES"
			+ "(?,?)";
	
	private static final String SQL_INSERT_PRESSURE = "INSERT INTO pressure"
			+ "(VALUE, UTC) VALUES"
			+ "(?,?)";
	
	private static final String SQL_LIST_TWO_WEEK_PRESSURE = "SELECT avg(value), TO_CHAR(TIMESTAMP_WITH_ZONE(utc/1000) , 'DD-MM-YYYY') as day_of_year FROM pressure WHERE TIMESTAMP_WITH_ZONE(utc/1000) > (TIMESTAMP(SYSDATE) - 15 DAY) GROUP BY day_of_year;";
	private static final String SQL_LIST_TWO_WEEK_TEMPERATURE = "SELECT avg(value), TO_CHAR(TIMESTAMP_WITH_ZONE(utc/1000) , 'DD-MM-YYYY') as day_of_year FROM temperature WHERE TIMESTAMP_WITH_ZONE(utc/1000) > (TIMESTAMP(SYSDATE) - 15 DAY) GROUP BY day_of_year;";
	private static final String SQL_LIST_HOUR_PRESSURE = "SELECT avg(value), EXTRACT(hour from TIMESTAMP_WITH_ZONE(utc/1000))  as hour_of_day FROM pressure WHERE TIMESTAMP_WITH_ZONE(utc/1000) > (TIMESTAMP(SYSDATE) - 24 HOUR) GROUP BY hour_of_day;";
	private static final String SQL_LIST_HOUR_TEMPERATURE = "SELECT avg(value), EXTRACT(hour from TIMESTAMP_WITH_ZONE(utc/1000))  as hour_of_day FROM temperature WHERE TIMESTAMP_WITH_ZONE(utc/1000) > (TIMESTAMP(SYSDATE) - 24 HOUR) GROUP BY hour_of_day;";
	
	public enum MeasurementRange { DAILY, HOURLY  }
	
	private static boolean initialized = false;
	
	private static Connection openConnection() {

		synchronized (Connection.class) {
			
			try {
				
				Connection connection = DriverManager.getConnection("jdbc:hsqldb:file:testdb", "SA", "");
				connection.setAutoCommit(true);
				
				if (!initialized) {
					createTablesIfNeeded(connection);
					initialized = true;
				}
				
				return connection;
				
			} catch (SQLException e) {
				e.printStackTrace();
				return null;
			}

		}
	}
	
	private static void releaseConnection(Connection connection, Statement statement)
	{
		try {
			if (statement != null)
				statement.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			if (connection != null)
				connection.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void createTablesIfNeeded(Connection connection) throws SQLException {
		Statement st = connection.createStatement();
		st.execute(SQL_CREATE_PRESSURE_TABLE);
		st.execute(SQL_CREATE_TEMPERATURE_TABLE);
		st.close();
	}

	public static boolean addTemperature(Temperature t) {

		PreparedStatement preparedStatement = null;
		Connection connection = null;
		
		try {
			
			connection = openConnection();
			preparedStatement = connection.prepareStatement(SQL_INSERT_TEMPERATURE);
			preparedStatement.setDouble(1, t.getValue());
			preparedStatement.setLong(2, t.getUtc());
			preparedStatement.executeUpdate();
			return true;
			
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		finally
		{
			releaseConnection(connection, preparedStatement);
		}
		
	}

	public static boolean addPressure(Pressure p) {
		
		PreparedStatement preparedStatement = null;
		Connection connection = null;
		
		try {
			
			connection = openConnection();
			preparedStatement = connection.prepareStatement(SQL_INSERT_PRESSURE);
			preparedStatement.setDouble(1, p.getValue());
			preparedStatement.setLong(2, p.getUtc());
			preparedStatement.executeUpdate();
			return true;
			
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
		finally
		{
			releaseConnection(connection, preparedStatement);
		}
	}

	public static List<Temperature> getTemperatureList(MeasurementRange range) {
		
		Statement statement = null;
		Connection connection = null;
		
		try
		{
			List<Temperature> result = new ArrayList<Temperature>();
			
			connection = openConnection();
			statement = connection.createStatement();
			
			String QUERY = range == MeasurementRange.HOURLY ? SQL_LIST_HOUR_TEMPERATURE : SQL_LIST_TWO_WEEK_TEMPERATURE;
			ResultSet rs = statement.executeQuery(QUERY);
			
			while (rs.next())
			{
				Temperature t = new Temperature();
				t.setValue(rs.getDouble(1));
				t.setFormattedTime(rs.getString(2));
				result.add(t);
			}
			
			return result;
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		finally
		{	
			releaseConnection(connection, statement);
		}
		
	}

	public static List<Pressure> getPressureList(MeasurementRange range) {
		
		Statement statement = null;
		Connection connection = null;
		
		try
		{
			List<Pressure> result = new ArrayList<Pressure>();
			
			connection = openConnection();
			statement = connection.createStatement();
			String QUERY = range == MeasurementRange.HOURLY ? SQL_LIST_HOUR_PRESSURE : SQL_LIST_TWO_WEEK_PRESSURE;
			ResultSet rs = statement.executeQuery(QUERY);
			
			while (rs.next())
			{
				Pressure p = new Pressure();
				p.setValue(rs.getDouble(1));
				p.setFormattedTime(rs.getString(2));
				result.add(p);
			}
			
			return result;
			
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		finally
		{	
			releaseConnection(connection, statement);
		}
	}

	public static void createTwoWeekTestTemperature()
	{
		java.util.Random rnd = new java.util.Random();
		
		long now = System.currentTimeMillis();
		long st = now - (15 * 1000 * 60 * 60 * 24);
		
		for (;st < (now + 2 * 1000 * 60 * 60 * 24); st += 1000 * 60 * 30) 
		{
			Temperature t = new Temperature();
			t.setValue(15 + rnd.nextInt(5));
			t.setUtc(st);
			Database.addTemperature(t);
		}
		
	}

	public static void createTwoWeekTestPressure()
	{
		java.util.Random rnd = new java.util.Random();
		
		long now = System.currentTimeMillis();
		long st = now - (15 * 1000 * 60 * 60 * 24);
		
		for (;st < (now + 2 * 1000 * 60 * 60 * 24) ; st += 1000 * 60 * 30) 
		{
			Pressure p = new Pressure();
			p.setValue(1000 + rnd.nextInt(20));
			p.setUtc(st);
			Database.addPressure(p);
		}
		
	}
	
	public static void main(String arg[]) {
		createTwoWeekTestTemperature();
		createTwoWeekTestPressure();
	}
}
